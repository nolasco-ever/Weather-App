{"ast":null,"code":"var _jsxFileName = \"/Users/evernolasco/reactproject/src/components/forecast.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSpring, useTrail, animated } from \"react-spring\"; // Import component\n\nimport Card from \"./card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Forecast({\n  todayForecast,\n  forecasts,\n  animate,\n  isDay\n}) {\n  _s();\n\n  const springProps = useSpring({\n    opacity: 1,\n    left: \"0px\",\n    from: {\n      opacity: 0,\n      left: \"-225px\"\n    },\n    config: {\n      mass: 1,\n      tension: 170,\n      friction: 20\n    },\n    reset: true\n  });\n  const springPropsExit = useSpring({\n    opacity: 0,\n    left: \"-225px\",\n    display: \"none\",\n    from: {\n      opacity: 1,\n      left: \"0px\"\n    },\n    config: {\n      mass: 1,\n      tension: 170,\n      friction: 20\n    },\n    reset: true\n  });\n  const trailProps = useTrail(6, {\n    opacity: 1,\n    marginTop: \"0px\",\n    from: {\n      opacity: 0,\n      marginTop: \"-25px\"\n    },\n    config: {\n      mass: 1,\n      tension: 170,\n      friction: 15\n    },\n    reset: true\n  });\n  const trailPropsExit = useTrail(6, {\n    opacity: 0,\n    display: \"none\",\n    from: {\n      opacity: 1\n    },\n    config: {\n      mass: 1,\n      tension: 170,\n      friction: 15\n    },\n    reset: true\n  });\n  console.log(todayForecast);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: todayForecast[0].id === undefined ? \"none\" : null\n    },\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"today-card-container\",\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animate === true ? springProps : springPropsExit,\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          day: todayForecast[0].day === undefined ? \"undefined\" : null,\n          timeOfDay: isDay,\n          temp: todayForecast[0].temp,\n          cloudType: todayForecast[0].cloudsType,\n          clouds: todayForecast[0].clouds,\n          high: todayForecast[0].high,\n          low: todayForecast[0].low\n        }, todayForecast[0].id === undefined ? \"undefined\" : null, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: forecasts.map((forecast, index) => /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animate === true ? trailProps[index] : trailPropsExit[index],\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          day: forecast.day,\n          timeOfDay: forecast.timeOfDay,\n          temp: forecast.temp,\n          cloudType: forecast.cloudsType,\n          clouds: forecast.clouds,\n          high: forecast.high,\n          low: forecast.low\n        }, forecast.id === undefined ? \"undefined\" : null, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 22\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Forecast, \"4udf5i+lOYoAy+YulJtiU3WKISY=\", false, function () {\n  return [useSpring, useSpring, useTrail, useTrail];\n});\n\n_c = Forecast;\n;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/evernolasco/reactproject/src/components/forecast.js"],"names":["React","useSpring","useTrail","animated","Card","Forecast","todayForecast","forecasts","animate","isDay","springProps","opacity","left","from","config","mass","tension","friction","reset","springPropsExit","display","trailProps","marginTop","trailPropsExit","console","log","id","undefined","day","temp","cloudsType","clouds","high","low","map","forecast","index","timeOfDay"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSpring, useTrail, animated } from \"react-spring\";\n\n// Import component\nimport Card from \"./card\";\n\nfunction Forecast({todayForecast, forecasts, animate, isDay}){\n\n    const springProps = useSpring({\n        opacity: 1,\n        left: \"0px\",\n\n        from: {\n            opacity: 0,\n            left: \"-225px\"\n        },\n        config: {\n            mass: 1,\n            tension: 170,\n            friction: 20\n        },\n\n        reset: true\n    })\n\n    const springPropsExit = useSpring({\n        opacity: 0,\n        left: \"-225px\",\n        display: \"none\",\n\n        from: {\n            opacity: 1,\n            left: \"0px\"\n        },\n        config: {\n            mass: 1,\n            tension: 170,\n            friction: 20\n        },\n\n        reset: true\n    })\n\n    const trailProps = useTrail(6, {\n        opacity: 1,\n        marginTop: \"0px\",\n\n        from: {\n            opacity: 0,\n            marginTop: \"-25px\"\n        },\n\n        config: {\n            mass: 1,\n            tension: 170,\n            friction: 15,\n        },\n\n        reset: true\n    })\n\n    const trailPropsExit = useTrail(6, {\n        opacity: 0,\n        display: \"none\",\n\n        from: {\n            opacity: 1\n        },\n\n        config: {\n            mass: 1,\n            tension: 170,\n            friction: 15\n        },\n\n        reset: true\n    })\n\n    console.log(todayForecast);\n    \n    return(\n        <div style={{display: todayForecast[0].id === undefined ? \"none\" : null}} className=\"container\">\n            <div className=\"today-card-container\">\n                    <animated.div style={animate === true ? springProps : springPropsExit} className=\"card\">\n                        <Card\n                            key={todayForecast[0].id === undefined ? \"undefined\" : null}\n                            day={todayForecast[0].day === undefined ? \"undefined\" : null}\n                            timeOfDay={isDay}\n                            temp={todayForecast[0].temp}\n                            cloudType={todayForecast[0].cloudsType}\n                            clouds={todayForecast[0].clouds}\n                            high={todayForecast[0].high}\n                            low={todayForecast[0].low}\n                        />\n                    </animated.div>\n            </div>\n\n            <div className=\"cards-container\">\n                {forecasts.map((forecast, index) => (\n                     <animated.div style={animate === true ? trailProps[index] : trailPropsExit[index]} className=\"card\">\n                        <Card\n                            key={forecast.id === undefined ? \"undefined\" : null}\n                            day={forecast.day}\n                            timeOfDay={forecast.timeOfDay}\n                            temp={forecast.temp}\n                            cloudType={forecast.cloudsType}\n                            clouds={forecast.clouds}\n                            high={forecast.high}\n                            low={forecast.low}\n                        />\n                 </animated.div>\n                ))\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}