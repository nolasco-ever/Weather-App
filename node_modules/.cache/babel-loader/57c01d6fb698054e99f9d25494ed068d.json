{"ast":null,"code":"var _jsxFileName = \"/Users/evernolasco/reactproject/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSpring, useTrail, animated, interpolate } from \"react-spring\";\nimport './App.css'; // Import component\n\nimport Forecast from \"./components/forecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"fae6fa0ed6e96f99493161cd7089d3a1\";\n\nfunction App() {\n  _s();\n\n  const [inputText, setInputText] = useState(\"\");\n  const [cityName, setCityName] = useState(\"Search for a city...\");\n  const [todayForecast, setTodayForecast] = useState([0]);\n  const [forecasts, setForecasts] = useState([]);\n  const [animate, setAnimate] = useState(true);\n\n  function inputTextHandler(e) {\n    setInputText(e.target.value);\n  }\n\n  ;\n\n  async function getWeatherData(e) {\n    e.preventDefault(); // Animate\n\n    setAnimate(true); // Clear previous state\n\n    setForecasts([]);\n    var location = inputText; // make sure user inputs a valid city and state separated by comma\n\n    if (location.includes(',')) {\n      var locArr = location.split(',');\n      var city = locArr[0];\n      var state = locArr[1]; // fetch data from weather api\n\n      const dataToday = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' + city + ',' + state + '&appid=' + API_key).then(res => res.json()).then(dataToday => dataToday);\n      setCityName(dataToday.name); // Gather coordinates\n\n      var long = dataToday.coord.lon;\n      var lat = dataToday.coord.lat;\n      const data = await fetch('https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + long + '&units=imperial&appid=' + API_key).then(res => res.json()).then(data => data);\n      console.log(data); // Create array of that will hold converted unix timestamps to weekdays\n\n      var numOfDays = data.daily.length - 1;\n      var weekDays = new Array(numOfDays); // Loop through array and convert each element from unix to weekday\n\n      for (var i = 0; i < numOfDays; i++) {\n        var dateObject = new Date(data.daily[i].dt * 1000);\n        var day = dateObject.toLocaleString(\"en-US\", {\n          weekday: \"long\"\n        });\n\n        if (i == 0) {\n          weekDays[i] = 'Today';\n        } else {\n          weekDays[i] = day;\n        }\n      } // boolean variable that will tell us if it is day or night\n\n\n      var isDay;\n\n      if (Date.now() > data.daily[0].sunrise && Date.now() < data.daily[0].sunset) {\n        isDay = true;\n      } else {\n        isDay = false;\n      }\n\n      var currentTemp = data.hourly[0].feels_like; // Create arrays for temp, clouds, hightemp, lowtemp\n\n      var tempArr = new Array(numOfDays);\n      var cloudsTypeArr = new Array(numOfDays);\n      var cloudsArr = new Array(numOfDays);\n      var highArr = new Array(numOfDays);\n      var lowArr = new Array(numOfDays);\n\n      for (var i = 0; i < numOfDays; i++) {\n        tempArr[i] = data.daily[i].temp.day;\n        cloudsTypeArr[i] = data.daily[i].weather[0].main;\n        cloudsArr[i] = data.daily[i].weather[0].description;\n        highArr[i] = data.daily[i].temp.max;\n        lowArr[i] = data.daily[i].temp.min;\n      } // Set today' forecast\n\n\n      setTodayForecast([{\n        id: Math.random() * 1000,\n        day: weekDays[0],\n        timeOfDay: isDay,\n        temp: currentTemp,\n        cloudsType: cloudsTypeArr[0],\n        clouds: cloudsArr[0],\n        high: highArr[0],\n        low: lowArr[0]\n      }]); // Set week's forecast\n\n      for (var i = 1; i < weekDays.length; i++) {\n        setForecasts(forecasts => [...forecasts, {\n          id: Math.random() * 1000,\n          day: weekDays[i],\n          timeOfDay: true,\n          temp: tempArr[i],\n          cloudsType: cloudsTypeArr[i],\n          clouds: cloudsArr[i],\n          high: highArr[i],\n          low: lowArr[i]\n        }]);\n      }\n    } else {\n      alert(\"Input a city and state separated by a comma\");\n    }\n\n    setInputText(\"\");\n  }\n\n  ;\n  console.log(cityName);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo\",\n        src: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: getWeatherData,\n        className: \"search-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn2.iconfinder.com/data/icons/font-awesome/1792/search-512.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputText,\n          onChange: inputTextHandler,\n          placeholder: \"City, State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-ttl\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: cityName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n      todayForecast: todayForecast,\n      forecasts: forecasts,\n      animate: animate,\n      setAnimate: setAnimate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yViJ2MjpzG+FaA2JizgSvmG0G+c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/evernolasco/reactproject/src/App.js"],"names":["React","useState","useSpring","useTrail","animated","interpolate","Forecast","API_key","App","inputText","setInputText","cityName","setCityName","todayForecast","setTodayForecast","forecasts","setForecasts","animate","setAnimate","inputTextHandler","e","target","value","getWeatherData","preventDefault","location","includes","locArr","split","city","state","dataToday","fetch","then","res","json","name","long","coord","lon","lat","data","console","log","numOfDays","daily","length","weekDays","Array","i","dateObject","Date","dt","day","toLocaleString","weekday","isDay","now","sunrise","sunset","currentTemp","hourly","feels_like","tempArr","cloudsTypeArr","cloudsArr","highArr","lowArr","temp","weather","main","description","max","min","id","Math","random","timeOfDay","cloudsType","clouds","high","low","alert"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { useSpring, useTrail, animated, interpolate } from \"react-spring\";\nimport './App.css';\n\n// Import component\nimport Forecast from \"./components/forecast\";\n\nconst API_key = \"fae6fa0ed6e96f99493161cd7089d3a1\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [cityName, setCityName] = useState(\"Search for a city...\");\n  const [todayForecast, setTodayForecast] = useState([0]);\n  const [forecasts, setForecasts] = useState([]);\n  const [animate, setAnimate] = useState(true);\n\n  function inputTextHandler(e){\n    setInputText(e.target.value);\n  };\n\n\n  async function getWeatherData(e){\n    e.preventDefault();\n    // Animate\n    setAnimate(true);\n\n    // Clear previous state\n    setForecasts([]);\n\n    var location = inputText;\n\n    // make sure user inputs a valid city and state separated by comma\n    if(location.includes(',')){\n      var locArr = location.split(',');\n\n      var city = locArr[0];\n      var state = locArr[1];\n\n      // fetch data from weather api\n      const dataToday = await fetch(\n        'https://api.openweathermap.org/data/2.5/weather?q='+city+','+state+'&appid='+API_key\n      ).then((res) => res.json())\n      .then((dataToday) => dataToday);\n\n      setCityName(dataToday.name);\n      \n      // Gather coordinates\n      var long = dataToday.coord.lon;\n      var lat = dataToday.coord.lat;\n\n      const data = await fetch(\n        'https://api.openweathermap.org/data/2.5/onecall?lat='+lat+'&lon='+long+'&units=imperial&appid='+API_key\n      ).then((res) => res.json())\n      .then((data) => data);\n\n      console.log(data);\n\n      // Create array of that will hold converted unix timestamps to weekdays\n      var numOfDays = data.daily.length - 1;\n      var weekDays = new Array(numOfDays);\n\n      // Loop through array and convert each element from unix to weekday\n      for (var i = 0; i < numOfDays; i++){\n        var dateObject = new Date(data.daily[i].dt * 1000);\n        var day = dateObject.toLocaleString(\"en-US\", {weekday: \"long\"});\n\n        if(i == 0){\n          weekDays[i] = 'Today';\n        }\n        else{\n          weekDays[i] = day;\n        }\n      }\n\n      // boolean variable that will tell us if it is day or night\n      var isDay;\n\n      if (Date.now() > data.daily[0].sunrise && Date.now() < data.daily[0].sunset){\n        isDay = true;\n      }\n      else{\n        isDay = false;\n      }\n\n      var currentTemp = data.hourly[0].feels_like;\n\n      // Create arrays for temp, clouds, hightemp, lowtemp\n      var tempArr = new Array(numOfDays);\n      var cloudsTypeArr = new Array(numOfDays);\n      var cloudsArr = new Array(numOfDays);\n      var highArr = new Array(numOfDays);\n      var lowArr = new Array(numOfDays);\n\n      for(var i = 0; i < numOfDays; i++){\n        tempArr[i] = data.daily[i].temp.day;\n        cloudsTypeArr[i] = data.daily[i].weather[0].main;\n        cloudsArr[i] = data.daily[i].weather[0].description;\n        highArr[i] = data.daily[i].temp.max;\n        lowArr[i] = data.daily[i].temp.min;\n      }\n      \n      // Set today' forecast\n      setTodayForecast([{id: Math.random() * 1000,\n        day: weekDays[0],\n        timeOfDay: isDay,\n        temp: currentTemp,\n        cloudsType: cloudsTypeArr[0],\n        clouds: cloudsArr[0],\n        high: highArr[0],\n        low: lowArr[0]}])\n\n      // Set week's forecast\n      for(var i = 1; i < weekDays.length; i++){\n        setForecasts((forecasts) => [...forecasts, {id: Math.random() * 1000,\n          day: weekDays[i],\n          timeOfDay: true,\n          temp: tempArr[i],\n          cloudsType: cloudsTypeArr[i],\n          clouds: cloudsArr[i],\n          high: highArr[i],\n          low: lowArr[i]},])\n      }\n    }\n    else{\n      alert(\"Input a city and state separated by a comma\");\n    }\n\n    setInputText(\"\");\n  };\n\n  console.log(cityName);\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"logo\" src=\"\"/>\n        <form onSubmit={getWeatherData} className=\"search-bar\">\n          <img src=\"https://cdn2.iconfinder.com/data/icons/font-awesome/1792/search-512.png\"/>\n          <input value={inputText} onChange={inputTextHandler} placeholder=\"City, State\" />\n        </form>\n      </header>\n\n      <div className=\"location-ttl\"><h3>{cityName}</h3></div>\n\n      <Forecast\n        todayForecast={todayForecast}\n        forecasts={forecasts}\n        animate={animate}\n        setAnimate={setAnimate}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}