{"ast":null,"code":"var _jsxFileName = \"/Users/evernolasco/reactproject/src/components/forecast.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSpring, useTrail, animated, interpolate } from \"react-spring\"; // Import component\n\nimport Card from \"./card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Forecast({\n  todayForecast,\n  forecasts,\n  animate,\n  setAnimate\n}) {\n  _s();\n\n  if (animate == !animate) {\n    set({\n      opacity: animate == true ? 1 : 0,\n      left: animate == true ? \"0px\" : \"-275px\",\n      from: {\n        opacity: animate == true ? 0 : 1,\n        left: animate == true ? \"-275px\" : 0\n      }\n    });\n  }\n\n  const [springProps, set] = useSpring(() => ({\n    opacity: 1,\n    left: \"0px\",\n    config: {\n      mass: 1,\n      tension: 270,\n      friction: 25\n    }\n  }));\n  const [trailProps, setTrailProps] = useTrail(6, {\n    opacity: 1,\n    top: \"0px\",\n    from: {\n      opacity: 0,\n      top: \"-25px\"\n    },\n    config: {\n      mass: 1,\n      tension: 270,\n      friction: 25\n    }\n  });\n  const trailPropsExit = useTrail(6, {\n    opacity: 0,\n    top: \"-25px\",\n    from: {\n      opacity: 1,\n      top: \"0px\"\n    },\n    config: {\n      mass: 1,\n      tension: 270,\n      friction: 25\n    }\n  });\n  console.log(trailProps);\n  console.log(springProps);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: todayForecast[0].id == undefined ? \"none\" : null\n    },\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"today-card-container\",\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: springProps,\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          day: todayForecast[0].day,\n          timeOfDay: todayForecast[0].timeOfDay,\n          temp: todayForecast[0].temp,\n          cloudType: todayForecast[0].cloudsType,\n          clouds: todayForecast[0].clouds,\n          high: todayForecast[0].high,\n          low: todayForecast[0].low\n        }, todayForecast[0].id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: forecasts.map((forecast, index) => /*#__PURE__*/_jsxDEV(animated.div, {\n        style: trailProps[index],\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          day: forecast.day,\n          timeOfDay: forecast.timeOfDay,\n          temp: forecast.temp,\n          cloudType: forecast.cloudsType,\n          clouds: forecast.clouds,\n          high: forecast.high,\n          low: forecast.low\n        }, forecast.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 22\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Forecast, \"pdL6XpRis2E4LPkiPK4WMzHmsdU=\", false, function () {\n  return [useSpring, useTrail, useTrail];\n});\n\n_c = Forecast;\n;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/evernolasco/reactproject/src/components/forecast.js"],"names":["React","useSpring","useTrail","animated","interpolate","Card","Forecast","todayForecast","forecasts","animate","setAnimate","set","opacity","left","from","springProps","config","mass","tension","friction","trailProps","setTrailProps","top","trailPropsExit","console","log","display","id","undefined","day","timeOfDay","temp","cloudsType","clouds","high","low","map","forecast","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSpring, useTrail, animated, interpolate } from \"react-spring\";\n\n// Import component\nimport Card from \"./card\";\n\nfunction Forecast({todayForecast, forecasts, animate, setAnimate}){\n\n    if(animate == !animate){\n        set({opacity: animate == true ? 1 : 0,\n            left: animate == true ? \"0px\" : \"-275px\",\n            from: {opacity: animate == true ? 0 : 1,\n               left: animate == true ? \"-275px\" : 0}})\n    }\n    const [springProps, set] = useSpring(() => ({\n        opacity: 1,\n        left: \"0px\",\n        config: {mass: 1,\n            tension: 270,\n            friction: 25}\n    }))\n\n    const [trailProps, setTrailProps] = useTrail(6, {\n        opacity: 1,\n        top: \"0px\",\n        from: {opacity: 0, top: \"-25px\"},\n        config: {mass: 1,\n                 tension: 270,\n                 friction: 25}\n    })\n    \n    const trailPropsExit = useTrail(6, {\n        opacity: 0,\n        top: \"-25px\",\n        from: {opacity: 1, top: \"0px\"},\n        config: {mass: 1,\n                 tension: 270,\n                 friction: 25}\n    })\n\n    console.log(trailProps);\n    console.log(springProps);\n\n    return(\n        <div style={{display: todayForecast[0].id == undefined ? \"none\" : null}} className=\"container\">\n            <div className=\"today-card-container\">\n                    <animated.div style={springProps} className=\"card\">\n                        <Card\n                            key={todayForecast[0].id}\n                            day={todayForecast[0].day}\n                            timeOfDay={todayForecast[0].timeOfDay}\n                            temp={todayForecast[0].temp}\n                            cloudType={todayForecast[0].cloudsType}\n                            clouds={todayForecast[0].clouds}\n                            high={todayForecast[0].high}\n                            low={todayForecast[0].low}\n                        />\n                    </animated.div>\n            </div>\n\n            <div className=\"cards-container\">\n                {forecasts.map((forecast, index) => (\n                     <animated.div style={trailProps[index]} className=\"card\">\n                        <Card\n                            key={forecast.id}\n                            day={forecast.day}\n                            timeOfDay={forecast.timeOfDay}\n                            temp={forecast.temp}\n                            cloudType={forecast.cloudsType}\n                            clouds={forecast.clouds}\n                            high={forecast.high}\n                            low={forecast.low}\n                        />\n                 </animated.div>\n                ))\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}